

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = CallVal Ident | CallVar Ident | FunArg Ident
  deriving (Eq, Ord, Show, Read)

data Param = DeclParam Expr | AnonParam [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Loc = DLocal Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt [Loc] Block
    | Ass Ident Expr
    | FAss Ident [Arg] Block
    | AddExpr Ident Expr
    | SubExpr Ident Expr
    | MulExpr Ident Expr
    | DivExpr Ident Expr
    | Ret Expr
    | VRet
    | SPrint Expr
    | FReturn [Arg] Block
    | CondIf Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Ident Expr ForKind Expr Stmt
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EIncr Ident
    | EDecr Ident
    | EPreIncr Ident
    | EPreDecr Ident
    | EApp Ident [Param]
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data ForKind = To | Downto
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

