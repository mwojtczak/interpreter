-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '*=' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '/' { PT _ (TS _ 16) }
  '/=' { PT _ (TS _ 17) }
  ';' { PT _ (TS _ 18) }
  '<' { PT _ (TS _ 19) }
  '<=' { PT _ (TS _ 20) }
  '=' { PT _ (TS _ 21) }
  '==' { PT _ (TS _ 22) }
  '>' { PT _ (TS _ 23) }
  '>=' { PT _ (TS _ 24) }
  '[' { PT _ (TS _ 25) }
  ']' { PT _ (TS _ 26) }
  'downto' { PT _ (TS _ 27) }
  'else' { PT _ (TS _ 28) }
  'false' { PT _ (TS _ 29) }
  'for' { PT _ (TS _ 30) }
  'function' { PT _ (TS _ 31) }
  'if' { PT _ (TS _ 32) }
  'local' { PT _ (TS _ 33) }
  'print' { PT _ (TS _ 34) }
  'return' { PT _ (TS _ 35) }
  'to' { PT _ (TS _ 36) }
  'true' { PT _ (TS _ 37) }
  'val' { PT _ (TS _ 38) }
  'var' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListTopDef { AbsGrammar.Program $1 }
TopDef :: { TopDef }
TopDef : 'function' Ident '(' ListArg ')' Block { AbsGrammar.FnDef $2 $4 $6 }
ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { Arg }
Arg : 'val' Ident { AbsGrammar.CallVal $2 }
    | 'var' Ident { AbsGrammar.CallVar $2 }
    | Ident { AbsGrammar.FunArg $1 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Param :: { Param }
Param : Expr { AbsGrammar.DeclParam $1 }
      | 'function' '(' ListArg ')' Block { AbsGrammar.AnonParam $3 $5 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }
Loc :: { Loc }
Loc : '[' 'local' Ident ']' { AbsGrammar.DLocal $3 }
ListLoc :: { [Loc] }
ListLoc : {- empty -} { [] }
        | Loc { (:[]) $1 }
        | Loc ';' ListLoc { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsGrammar.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : ';' { AbsGrammar.Empty }
     | ListLoc Block { AbsGrammar.BStmt $1 $2 }
     | Ident '=' Expr ';' { AbsGrammar.Ass $1 $3 }
     | Ident '=' 'function' '(' ListArg ')' Block { AbsGrammar.FAss $1 $5 $7 }
     | Ident '+=' Expr ';' { AbsGrammar.AddExpr $1 $3 }
     | Ident '-=' Expr ';' { AbsGrammar.SubExpr $1 $3 }
     | Ident '*=' Expr ';' { AbsGrammar.MulExpr $1 $3 }
     | Ident '/=' Expr ';' { AbsGrammar.DivExpr $1 $3 }
     | 'return' Expr ';' { AbsGrammar.Ret $2 }
     | 'return' ';' { AbsGrammar.VRet }
     | 'print' '(' Expr ')' { AbsGrammar.SPrint $3 }
     | 'return' 'function' '(' ListArg ')' Block { AbsGrammar.FReturn $4 $6 }
     | 'if' '(' Expr ')' Stmt ';' { AbsGrammar.CondIf $3 $5 }
     | 'if' '(' Expr ')' Stmt 'else' Stmt { AbsGrammar.CondElse $3 $5 $7 }
     | 'while' '(' Expr ')' Stmt { AbsGrammar.While $3 $5 }
     | 'for' '(' Ident '=' Expr ForKind Expr ')' Stmt { AbsGrammar.For $3 $5 $6 $7 $9 }
     | Expr ';' { AbsGrammar.SExp $1 }
Expr6 :: { Expr }
Expr6 : Ident { AbsGrammar.EVar $1 }
      | Integer { AbsGrammar.ELitInt $1 }
      | 'true' { AbsGrammar.ELitTrue }
      | 'false' { AbsGrammar.ELitFalse }
      | Ident '++' { AbsGrammar.EIncr $1 }
      | Ident '--' { AbsGrammar.EDecr $1 }
      | '++' Ident { AbsGrammar.EPreIncr $2 }
      | '--' Ident { AbsGrammar.EPreDecr $2 }
      | Ident '(' ListParam ')' { AbsGrammar.EApp $1 $3 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr }
Expr5 : '-' Expr6 { AbsGrammar.Neg $2 }
      | '!' Expr6 { AbsGrammar.Not $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsGrammar.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsGrammar.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsGrammar.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { AbsGrammar.EAnd $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 '||' Expr { AbsGrammar.EOr $1 $3 } | Expr1 { $1 }
ForKind :: { ForKind }
ForKind : 'to' { AbsGrammar.To } | 'downto' { AbsGrammar.Downto }
AddOp :: { AddOp }
AddOp : '+' { AbsGrammar.Plus } | '-' { AbsGrammar.Minus }
MulOp :: { MulOp }
MulOp : '*' { AbsGrammar.Times }
      | '/' { AbsGrammar.Div }
      | '%' { AbsGrammar.Mod }
RelOp :: { RelOp }
RelOp : '<' { AbsGrammar.LTH }
      | '<=' { AbsGrammar.LE }
      | '>' { AbsGrammar.GTH }
      | '>=' { AbsGrammar.GE }
      | '==' { AbsGrammar.EQU }
      | '!=' { AbsGrammar.NE }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

